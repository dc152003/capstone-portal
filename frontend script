frontend\frontend\src\app\app.routes.ts
import { Routes } from '@angular/router';
import { Login } from './login/login';
import { Signup } from './signup/signup';
import { Dashboard } from './dashboard/dashboard';
import { BestFitCandidate } from './best-fit-candidate/best-fit-candidate';
import { JobDescriptions } from './job-descriptions/job-descriptions';
import { ResumeUpload } from './resume-upload/resume-upload';
import { CreateJob } from './create-job/create-job';
import { JobDescriptionView } from './job-description-view/job-description-view';
import { DisplayResumes } from './display-resumes/display-resumes';

export const routes: Routes = [
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: 'login', component: Login },
  { path: 'signup', component: Signup },
  { path: 'dashboard', component: Dashboard },
  // HR screens
  { path: 'dashboard/create-job', component: CreateJob },
  { path: 'dashboard/best-fit-candidate', component: BestFitCandidate },
  { path: 'dashboard/resume-upload', component: ResumeUpload },
  { path: 'dashboard/display-resumes', component: DisplayResumes },
  // Candidate screens
  { path: 'dashboard/job-description-view/:id', component: JobDescriptionView },
  { path: 'dashboard/job-descriptions', component: JobDescriptions },
  // fallback
  { path: '**', redirectTo: 'login' }
];

frontend\frontend\src\app\app.html
<div class="main-content">
  <router-outlet></router-outlet>
</div>

frontend\frontend\src\app\signup\signup.html
<div class="signup-container">
  <!-- Form Section -->
  <div class="form-section">
    <h2>Create Your Account</h2>
    <form (ngSubmit)="signup()" #signupForm="ngForm">
      <input 
        type="text" 
        placeholder="Username" 
        [(ngModel)]="username" 
        name="username" 
        required 
      />
      <input 
        type="email" 
        placeholder="Email" 
        [(ngModel)]="email" 
        name="email" 
        required 
      />
      <input 
        type="password" 
        placeholder="Password" 
        [(ngModel)]="password" 
        name="password" 
        required 
      />
      <select [(ngModel)]="role" name="role" required>
        <option value="candidate">Candidate</option>
        <option value="hr-admin">HR Admin</option>
      </select>
      <button type="submit" [disabled]="signupForm.invalid">Sign Up</button>
    </form>

    <p *ngIf="signupSuccessMessage" class="success-message">{{ signupSuccessMessage }}</p>
    <p *ngIf="signupErrorMessage" class="error-message">{{ signupErrorMessage }}</p>

    <p class="login-link">Already have an account?
      <button type="button" routerLink="/login" class="secondary-btn">Login</button>
    </p>
  </div>

  <!-- Rules Section -->
  <div class="rules-section">
    <h3>Signup Rules</h3>
    <ul>
      <li><strong>Username:</strong> 4â€“9 characters, only letters or letters+numbers</li>
      <li><strong>Email:</strong>
        <ul>
          <li>Candidates â†’ any valid email</li>
          <li>HR Admins â†’ must end with <code>@mmc.com</code></li>
        </ul>
      </li>
      <li><strong>Password:</strong> 5â€“9 characters, must include letters, numbers, and special characters</li>
    </ul>
  </div>
</div>

frontend\frontend\src\app\login\login.html
<div class="container">
  <h2>Login</h2>
  <form (ngSubmit)="login()" #loginForm="ngForm">
    <input 
      type="email" 
      placeholder="Email (username@mmc.com)" 
      [(ngModel)]="email" 
      name="email" 
      required 
    />
    <input 
      type="password" 
      placeholder="Password (letters and numbers)" 
      [(ngModel)]="password" 
      name="password" 
      required 
    />
    <button type="submit" [disabled]="loginForm.invalid">Login</button>
  </form>

  <p *ngIf="loginSuccessMessage" class="success-message">{{ loginSuccessMessage }}</p>
  <p *ngIf="loginErrorMessage" class="error-message">{{ loginErrorMessage }}</p>

  <p>Donâ€™t have an account?
    <button type="button" routerLink="/signup" class="secondary-btn">Sign Up</button>
  </p>
</div>

frontend\frontend\src\app\dashboard\dashboard.html
<app-navbar></app-navbar>
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
/>
<div class="container" role="main" aria-label="Dashboard">
  <!-- <h2>Recruitment Agent</h2> -->
 
  <!-- HR Admin View -->
  <div *ngIf="role === 'hr-admin'" class="role-view">
    <p class="welcome-text">Welcome back, <strong>{{ usernameDisplay }}</strong> ðŸ‘‹</p>
    <p class="role-badge">Role: HR Admin</p>
 
    <!-- Stats Cards -->
    <div class="cards-container">
      <div class="card">
        <i class="fa-solid fa-clipboard-list card-icon"></i>
        <h3>{{ stats.jobs }}</h3>
        <p>Job Descriptions Created</p>
      </div>
      <div class="card">
        <i class="fa-solid fa-file-arrow-up card-icon"></i>
        <h3>{{ stats.resumes }}</h3>
        <p>Resumes Uploaded</p>
      </div>
      <div class="card">
        <i class="fa-solid fa-user-plus card-icon"></i>
        <h3>{{ stats.candidates }}</h3>
        <p>Candidate Users Registered</p>
      </div>
      <div class="card">
        <!-- Make sure this icon element is present -->
        <i class="fa-solid fa-user-plus card-icon"></i>
        <h3>{{ stats.candidatesApplied }}</h3>
        <p>Candidates Applied</p>
      </div>
    </div>
 
    <!-- Insights Section -->
    <section class="insights">
      <h4>Insights</h4>
      <div class="placeholder-chart">
        <p>ðŸ“Š Charts coming soon (e.g. skills distribution, resumes per job)</p>
      </div>
    </section>
  </div>
 
  <!-- Candidate View -->
  <div *ngIf="role === 'candidate'" class="role-view">
    <h3>Welcome, {{ usernameDisplay }} ðŸŽ‰</h3>
    <p class="role-badge">Role: Candidate</p>
    <p>Explore job descriptions and upload your resume for positions you like.</p>
  </div>
 
  <!-- Fallback if no role -->
  <div *ngIf="!role" class="no-role">
    <p>Please <a routerLink="/login">login</a> to access the dashboard.</p>
  </div>
</div>
 
<app-footer></app-footer>
 
 frontend\frontend\src\app\shared\footer\footer.html
 <footer class="footer">
    <div class="container">
      <div class="left-section">
        <div class="logo-and-name">
          <!-- Replace with your actual logo -->
          <svg width="32" height="32" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg" style="margin-right: 8px;">
            <rect width="24" height="24" rx="4" />
          </svg>
          <span class="company-name">MarshMcLennan</span>
        </div>
        <p class="description">
          Marsh McLennan is the leader in risk, strategy and people, helping clients navigate a dynamic environment through four global businesses.
        </p>
        <div class="links">
          <a href="#" class="link">Terms of Use</a>
          <a href="#" class="link">Privacy Notice</a>
          <a href="#" class="link">Accessibility</a>
          <a href="#" class="link">Cookie Notice</a>
          <a href="#" class="link">Manage Cookies</a>
        </div>
        <p class="copyright">Â© 2025 Mercer LLC. All Rights Reserved.</p>
      </div>
  
      <div class="right-section">
        <nav class="nav-links">
          <a href="#" class="nav-link">Marsh</a>
          <a href="#" class="nav-link">GuyCarpenter</a>
          <a href="#" class="nav-link">Mercer</a>
          <a href="#" class="nav-link">OliverWyman</a>
        </nav>
        <div class="social-icons">
          <a href="https://twitter.com" target="_blank" rel="noopener noreferrer" class="social-button" aria-label="Twitter">
            <!-- Twitter SVG icon -->
            <svg width="20" height="20" fill="white" viewBox="0 0 24 24">
              <path d="M23 3a10.9 10.9 0 01-3.14 1.53A4.48 4.48 0 0022.4.36a9.05 9.05 0 01-2.88 1.1A4.52 4.52 0 0016.67 0c-2.5 0-4.52 2.03-4.52 4.53 0 .35.04.7.11 1.03A12.8 12.8 0 013 1.64a4.52 4.52 0 001.4 6.04 4.48 4.48 0 01-2.05-.57v.06c0 2.2 1.56 4.04 3.63 4.46a4.52 4.52 0 01-2.04.08 4.53 4.53 0 004.22 3.14A9.05 9.05 0 012 19.54a12.8 12.8 0 006.92 2.03c8.3 0 12.85-6.88 12.85-12.85 0-.2 0-.42-.02-.63A9.22 9.22 0 0023 3z"/>
            </svg>
          </a>
          <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer" class="social-button" aria-label="LinkedIn">
            <!-- LinkedIn SVG icon -->
            <svg width="20" height="20" fill="white" viewBox="0 0 24 24">
              <path d="M4.98 3.5C4.98 4.88 3.88 6 2.5 6S0 4.88 0 3.5 1.12 1 2.5 1 4.98 2.12 4.98 3.5zM.5 8h4v12h-4V8zm7 0h3.6v1.7h.05c.5-.95 1.7-1.95 3.5-1.95 3.75 0 4.45 2.5 4.45 5.75V20h-4v-5.5c0-1.3 0-3-1.8-3s-2.1 1.4-2.1 2.9V20h-4V8z"/>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </footer>

frontend\frontend\src\app\shared\navbar\navbar.html
<header class="navbar" role="navigation" aria-label="Main navigation">
  <div class="nav-left">
    <div class="logo">
      <img src="https://upload.wikimedia.org/wikipedia/commons/7/7e/Mercer_h_rgb_c.svg"
           alt="Mercer Logo" class="mercer-logo" />
           <div class="project-name">Recruitment Agent</div>  <!-- Added project name here -->
    </div>
 
    <button routerLink="/dashboard" [class.active]="currentUrl === '/dashboard'">Dashboard</button>
 
    <button *ngIf="role === 'hr-admin'" routerLink="/dashboard/create-job" [class.active]="currentUrl === '/dashboard/create-job'">
      Create Job Description
    </button>
 
    <button *ngIf="role === 'candidate'" routerLink="/dashboard/job-descriptions" [class.active]="currentUrl === '/dashboard/job-descriptions'">
      Job Descriptions
    </button>
 
    <button *ngIf="role" routerLink="/dashboard/resume-upload" [class.active]="currentUrl === '/dashboard/resume-upload'">
      Resume Upload
    </button>
 
    <button *ngIf="role === 'hr-admin'" routerLink="/dashboard/display-resumes" [class.active]="currentUrl === '/dashboard/display-resumes'">
      View Resumes
    </button>
 
    <button *ngIf="role === 'hr-admin'" routerLink="/dashboard/best-fit-candidate" [class.active]="currentUrl === '/dashboard/best-fit-candidate'">
      Best Fit Candidate
    </button>
  </div>
 
  <div class="nav-right">
    <!-- User Profile Icon -->
    <div class="user-menu" (click)="toggleDropdown()">
      <img src="https://cdn-icons-png.flaticon.com/512/847/847969.png" alt="User" class="user-icon" />
     
      <!-- Dropdown -->
      <div class="dropdown" *ngIf="dropdownOpen">
        <p><strong>Username : <i>{{ username }}</i></strong></p>
        <p> Email : {{ email }}</p>
        <p class="role">Role : {{ role }}</p>
 
        <div class="toggle-theme">
          <label class="switch">
            <input type="checkbox" (change)="toggleDarkMode($event)">
            <span class="slider round"></span>
          </label>
          <span>Dark Mode</span>
        </div>
 
        <button (click)="logout()">Logout</button>
      </div>
    </div>
  </div>
</header>

frontend\frontend\src\app\job-descriptions\job-descriptions.html
<app-navbar></app-navbar>
<div class="container">
  <h2>Job Descriptions</h2>
  <div class="search-bar">
    <input
      type="text"
      placeholder="Search by title or location"
      [(ngModel)]="searchTerm"
      (input)="filterJobs()"
      class="search-input"
    />
    <span class="search-icon" aria-hidden="true">
      <!-- SVG search icon -->
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" stroke="#999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search" viewBox="0 0 24 24">
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
      </svg>
    </span>
  </div>
  <div *ngFor="let job of filteredJobs" class="job-card">
    <h4>{{ job.title }} <small>({{ job.location }})</small></h4>
    <p><strong>Experience:</strong> {{ job.experience || 'N/A' }} yrs | <strong>Skills:</strong> {{ job.preferredSkills?.join(', ') }}</p>
    <div class="job-actions">
      <button (click)="viewFull(job)">Read full JD</button>
      <button (click)="apply(job)">Apply / Upload Resume</button>
    </div>
   
  </div>
</div>
 frontend\frontend\src\app\job-description-view\job-description-view.html
 <app-navbar></app-navbar>

<div class="container" *ngIf="!loading && !error">
  <h2>{{ job?.title }}</h2>
  <p><strong>Location:</strong> {{ job?.location || 'N/A' }}</p>
  <p><strong>Experience:</strong> {{ job?.experience || 'N/A' }} years</p>
  <p><strong>Preferred Skills:</strong> {{ job?.preferredSkills?.join(', ') || 'N/A' }}</p>
  <p><strong>Education:</strong> {{ job?.education || 'N/A' }}</p>

  <section class="description">
    <h3>Description</h3>
    <p style="white-space: pre-wrap;">{{ job?.description }}</p>
  </section>

  <div class="actions" style="margin-top: 20px;">
    <button (click)="downloadPDF()">Download PDF</button>
    <button (click)="goBack()">Back to Job Descriptions</button>
  </div>
</div>

<div *ngIf="loading" class="loading">Loading job description...</div>
<div *ngIf="error" class="error">{{ error }}</div>

frontend\frontend\src\app\resume-upload\resume-upload.html
<app-navbar></app-navbar>
 
<div class="container">
  <h2>Resume Upload</h2>
 
  <form (ngSubmit)="onSubmit()" #resumeForm="ngForm" enctype="multipart/form-data" novalidate>
    <!-- Candidate Name -->
    <label>
      Candidate Name:
      <input type="text" name="candidateName" [(ngModel)]="candidateName" [readonly]="!isHrAdmin" required />
    </label>
 
    <!-- Select Job -->
    <label>
      Select Job Description:
      <select name="jobId" [(ngModel)]="selectedJobId" (change)="onJobChange()" required>
        <option value="" disabled>Select a job</option>
        <option *ngFor="let job of jobs" [value]="job._id">{{ job.title }}</option>
      </select>
    </label>
 
    <!-- JD Link -->
    <div *ngIf="selectedJob" style="margin-bottom: 1rem;">
      <a (click)="viewJD()" style="text-decoration: underline; cursor: pointer;">
        Read full JD: {{ selectedJob.title }}
      </a>
    </div>
 
    <!-- Drag & Drop Resume Upload -->
    <div class="upload-box" (click)="fileInput.click()" (dragover)="onDragOver($event)"
      (dragleave)="onDragLeave($event)" (drop)="onDrop($event)" [class.dragover]="isDragOver">
      <i class="fas fa-cloud-upload-alt" *ngIf="!selectedFileName"></i>
 
      <div *ngIf="!selectedFileName">
        <strong>Drag & drop your resume here</strong>
        <span>or click to browse (PDF only)</span>
      </div>
 
      <div *ngIf="selectedFileName" class="file-selected">
        <i class="fas fa-file-pdf"></i>
        <span>{{ selectedFileName }}</span>
      </div>
 
      <input type="file" #fileInput (change)="onFileSelected($event)" accept=".pdf" />
    </div>
 
    <!-- HR Admin Actions -->
    <div *ngIf="isHrAdmin" style="margin-top: 1rem;">
      <button type="button" (click)="uploadResume()" [disabled]="!canUpload()" style="margin-right: 1rem;">
        Upload
      </button>
 
      <button type="button" (click)="analyzeResume()" [disabled]="!uploadedResumeId || loadingAi">
        {{ loadingAi ? 'Analyzing...' : 'AI Analyze' }}
      </button>
 
      <p *ngIf="uploadMessage" style="color: green; margin-top: 0.5rem;">
        {{ uploadMessage }}
      </p>
      <p *ngIf="errorAi" style="color: red; margin-top: 0.5rem;">
        {{ errorAi }}
      </p>
    </div>
 
    <!-- Candidate Actions -->
    <div *ngIf="!isHrAdmin" style="margin-top: 1rem;">
      <button type="submit" [disabled]="!canSubmit()">Submit</button>
      <p *ngIf="submitMessage" style="color: green; margin-top: 0.5rem;">
        {{ submitMessage }}
      </p>
    </div>
  </form>
 
  <!-- AI Candidate Summary Card -->
  <div *ngIf="aiResults?.length" class="candidate-summary-card" style="margin-top: 2rem;">
    <h3>AI Resume Analysis Results</h3>
    <div *ngFor="let r of aiResults" class="summary-card">
      <div class="export-button-container">
        <button class="export-btn" (click)="exportReport(r.resumeId)">
          ðŸ“„ Export PDF
        </button>
      </div>
 
      <div class="summary-details">
        <p><strong>Candidate Name:</strong> {{ r.candidateName }}</p>
        <p><strong>Experience:</strong> {{ r.experience }}</p>
        <p><strong>Skills:</strong> {{ r.skills?.join(', ') }}</p>
        <p><strong>Relevance Score:</strong> {{ r.relevanceScore }}</p>
        <p><strong>Comments/Review:</strong> {{ r.comments }}</p>
        <p><strong>Resume Link:</strong>
          <a [href]="r.resumeUrl" target="_blank" rel="noopener noreferrer">View Resume</a>
        </p>
      </div>
    </div>
  </div>
</div>

 frontend\frontend\src\app\create-job\create-job.html
 <app-navbar></app-navbar>
 
<div class="container">
  <h2>Manage Job Postings</h2>
 
  <!-- Add Job Message (above create form) -->
  <div *ngIf="addMessage" class="message-box" [ngClass]="addMessage.type" style="margin-bottom: 16px;">
    {{ addMessage.text }}
  </div>
 
  <section class="create-job-section">
    <h3>Create New Job Posting</h3>
    <form (ngSubmit)="addJob()" #jobForm="ngForm">
      <input type="text" placeholder="Job Title" [(ngModel)]="newJob.title" name="title" required />
      <input type="text" placeholder="Location" [(ngModel)]="newJob.location" name="location" />
      <input type="number" placeholder="Experience (years)" [(ngModel)]="newJob.experience" name="experience" min="0" />
      <textarea placeholder="Job Description" [(ngModel)]="newJob.description" name="description" required></textarea>
      <input type="text" placeholder="Preferred Skills (comma separated)" [(ngModel)]="newJob.preferredSkillsStr" name="preferredSkills" />
      <input type="text" placeholder="Education" [(ngModel)]="newJob.education" name="education" />
      <button type="submit" [disabled]="jobForm.invalid">Add Job</button>
    </form>
  </section>
 
  <!-- Existing Job Message (above existing jobs) -->
  <div *ngIf="existingJobMessage" class="message-box" [ngClass]="existingJobMessage.type" style="margin: 20px 0;">
    {{ existingJobMessage.text }}
  </div>
 
  <section class="existing-jobs-section" style="margin-top:18px;">
    <h3>Existing Job Postings</h3>
    <div class="search-bar-container">
      <div class="search-bar">
        <input
          type="text"
          placeholder="Search by title or location"
          [(ngModel)]="searchTerm"
          (input)="filterJobs()"
          class="search-input"
        />
        <span class="search-icon" aria-hidden="true">
          <!-- SVG search icon -->
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" stroke="#999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search" viewBox="0 0 24 24">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </span>
      </div>
    </div>
    <div *ngFor="let job of filteredJobs" class="job-card" style="border:1px solid #eee; padding:12px; margin-bottom:10px;">
      <div *ngIf="editingJobId !== job._id">
        <h4>{{ job.title }} <small>({{ job.location }})</small></h4>
        <p>{{ job.description }}</p>
        <p><strong>Experience:</strong> {{ job.experience || 'N/A' }} yrs | <strong>Skills:</strong> {{ job.preferredSkills?.join(', ') }}</p>
        <div class="actions">
          <button (click)="editJob(job)">Edit</button>
          <button (click)="confirmDelete(job._id)">Delete</button>
        </div>
      </div>
 
      <div *ngIf="editingJobId === job._id">
        <input type="text" [(ngModel)]="editedJob.title" placeholder="Job Title" />
        <input type="text" [(ngModel)]="editedJob.location" placeholder="Location" />
        <input type="number" [(ngModel)]="editedJob.experience" placeholder="Experience (years)" min="0" />
        <textarea [(ngModel)]="editedJob.description" placeholder="Job Description"></textarea>
        <input type="text" [(ngModel)]="editedJob.preferredSkillsStr" placeholder="Preferred Skills (comma separated)" />
        <div class="edit-form-actions">
          <button class="btn-save" (click)="saveEdit(job)">Save</button>
          <button class="btn-cancel" (click)="cancelEdit()">Cancel</button>
        </div>
      </div>
    </div>
  </section>
 
</div>

frontend\frontend\src\app\display-resumes\display-resumes.html
<app-navbar></app-navbar>
<div class="container" role="main" aria-label="All Resumes">
  <h2>All Resumes</h2>
 
  <!-- Search Bar -->
  <div class="search-bar-container">
    <input
      type="text"
      placeholder="Search by candidate name or job description"
      [(ngModel)]="searchTerm"
      (input)="filterResumes()"
      class="search-input"
      aria-label="Search resumes"
    />
  </div>
 
  <!-- Error Message -->
  <p *ngIf="errorMessage" class="error-message">{{ errorMessage }}</p>
 
  <!-- Resumes Table -->
  <table class="resumes-table" *ngIf="filteredResumes.length > 0; else noResumes">
    <thead>
      <tr>
        <th>S.No</th>
        <th>Candidate Name</th>
        <th>Job Description Title</th>
        <th>Uploaded Date</th>
        <th>Resume</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let resume of filteredResumes; let i = index">
        <td>{{ i + 1 }}.</td>
        <td [innerHTML]="highlight(resume.candidateName)"></td>
<td [innerHTML]="highlight(resume.jobDescription || resume.jobTitle)"></td>
        <td>{{ resume.uploadedAt | date:'medium' }}</td>
        <td>
          <a [href]="getResumeUrl(resume.resumeUrl)" target="_blank" rel="noopener noreferrer">
            View Resume
          </a>
        </td>
      </tr>
    </tbody>
  </table>
 
  <!-- No Resumes Found -->
  <ng-template #noResumes>
    <p class="no-resumes-message">No resumes found.</p>
  </ng-template>
</div>
 
 
frontend\frontend\src\app\best-fit-candidate\best-fit-candidate.html
<app-navbar></app-navbar>

<div class="container">
  <h2>Best Fit Candidate</h2>

  <div class="form-controls">
    <label for="jobSelect">Select Job:</label>
    <select id="jobSelect" [(ngModel)]="selectedJobId" required>
      <option value="">-- Select job --</option>
      <option *ngFor="let j of jobs" [value]="j._id">{{ j.title }}</option>
    </select>

    <label for="topN">Number of Candidates:</label>
    <input id="topN" type="number" [(ngModel)]="topN" min="1" placeholder="e.g. 5" />

    <button (click)="fetchTop()" [disabled]="loading">
      {{ loading ? 'Loading...' : 'Show Top ' + (topN || 0) + ' Candidates' }}
    </button>
  </div>

  <div *ngIf="loading" style="margin-top: 16px; font-weight: bold; color: #007bff;">
    Analyzing resumes, please wait...
  </div>

  <div *ngIf="!loading && candidates?.length" style="margin-top:16px;">
    <h4>Top candidates for selected job</h4>
    <table>
      <thead>
        <tr>
          <th>Candidate</th>
          <th>Experience</th>
          <th>Skills</th>
          <th>Relevance Score</th>
          <th>Comments</th>
          <th>Resume</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let c of candidates">
          <td>{{ c.candidateName }}</td>
          <td>{{ c.experience || 'N/A' }}</td>
          <td>{{ getSkillsAsString(c) }}</td>
          <td>{{ c.relevanceScore || c.relevance || 'N/A' }}</td>
          <td>{{ c.comments }}</td>
          <td>
            <a [href]="c.resumeUrl || c.resumeLink" target="_blank" rel="noopener noreferrer">Open</a>
          </td>
        </tr>
      </tbody>
    </table>

    <div style="margin-top: 16px; text-align: right;">
      <button (click)="exportAllReport()" [disabled]="!candidates.length || loading">
        Export All to PDF
      </button>
    </div>
    
  </div>
</div>

 frontend\frontend\src\app\services\auth.service.ts
 import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private tokenKey = 'auth_token';

  setToken(token: string) {
    localStorage.setItem(this.tokenKey, token);
  }

  getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  getRole(): string | null {
    return localStorage.getItem('user_role');
  }

  getUsername(): string | null {
    return localStorage.getItem('username');
  }

  getEmail(): string | null {
    return localStorage.getItem('email');
  }

  setAuth(token: string, role: string, username: string, email: string) {
    this.setToken(token);
    localStorage.setItem('user_role', role);
    localStorage.setItem('username', username);
    localStorage.setItem('email', email);
  }

  clearAuth() {
    localStorage.removeItem(this.tokenKey);
    localStorage.removeItem('user_role');
    localStorage.removeItem('username');
    localStorage.removeItem('email');
  }
}

frontend\frontend\src\app\services\dashboard.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './auth.service';

@Injectable({ providedIn: 'root' })
export class DashboardService {
  private apiUrl = 'http://localhost:5000/api/dashboard';

  constructor(private http: HttpClient, private auth: AuthService) {}

  getStats() {
    const token = this.auth.getToken();
    const headers = new HttpHeaders({
      Authorization: `Bearer ${token || ''}`
    });
    return this.http.get<{
      jobs: number;
      resumes: number;
      candidates: number;
      candidatesApplied: number;
    }>(`${this.apiUrl}/stats`, { headers });
  }
}

frontend\frontend\src\app\services\job.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

// Define Job interface for type safety
export interface Job {
  _id: string;
  title: string;
  location?: string;
  experience?: number;
  description: string;
  preferredSkills?: string[];
  education?: string;
  createdBy?: string;
  // add other fields if needed
}

@Injectable({
  providedIn: 'root'
})
export class JobService {
  private apiUrl = 'http://localhost:5000/api/jobs';

  constructor(private http: HttpClient) {}

  private getHeaders() {
    const token = localStorage.getItem('auth_token'); // fix key here
    return {
      headers: new HttpHeaders({
        Authorization: `Bearer ${token || ''}`
      })
    };
  }

  list(): Observable<Job[]> {
    return this.http.get<Job[]>(this.apiUrl);
  }

  get(id: string): Observable<Job> {
    return this.http.get<Job>(`${this.apiUrl}/${id}`);
  }

  create(job: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, job, this.getHeaders());
  }

  update(id: string, job: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${id}`, job, this.getHeaders());
  }

  delete(id: string): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${id}`, this.getHeaders());
  }

  recommend(jobId: string, topN: number): Observable<any[]> {
    return this.http.get<any[]>(
      `${this.apiUrl}/${jobId}/recommend?top=${topN}`,
      this.getHeaders()
    );
  }
}

